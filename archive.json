{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2020-12-16T08:13:46.469632+00:00",
  "repo": "cgtf/draft-crypto-assets-security-considerations",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "MDU6SXNzdWU1Njg1MTM2MzI=",
      "title": "Incorporation of bitcoin vaults into the draft",
      "url": "https://github.com/cgtf/draft-crypto-assets-security-considerations/issues/3",
      "state": "OPEN",
      "author": "corollari",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "After reading through the current draft, I'd like to bring to your attention the concept of Bitcoin Vaults, which hasn't received much focus so far but that I believe might be interesting to discuss in this scenario, as it could add some value to this draft.\r\n\r\n## Concept\r\nInstead of using standard multisigs or P2KH to store the coins under custody, a more complex script can be used to deters attackers and/or establish withdrawal protocols enforced by the Bitcoin consensus.\r\n\r\n## Background\r\nAs far as I know the idea of Bitcoin Vaults was originally proposed on the [Bitcoin covenants paper](https://fc16.ifca.ai/bitcoin/papers/MES16.pdf) but that proposal required a soft-fork to work, so it's not really interesting.\r\n\r\nA few years later, Bryan Bishop proposed another scheme on the [bitcoin-dev mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-August/017229.html) that takes the original idea and makes it's implementation viable in the current Bitcoin chain, turning it into something much more interesting for custodians.\r\n\r\n## Bitcoin Vaults\r\nEssentially, the scheme describes a system where withdrawal of funds is delayed and during that delay it's possible to send the coins back to the vault, thus if the keys ever get stolen, the original owner can just lock them forever. The idea is that, by introducing the possibility of denying the attacker their reward, attackers will be less likely to target the system.\r\n\r\n### Expanded vaults\r\nUsing the same primitives, covenants and relative timelocks, it is possible to construct the following schemes:\r\n- Arbitrary hierarchy of keys: At the bottom you'd have weakly-secured keys that can withdraw the money really slowly, and as you go up in the hierarchy the keys get more strongly secured and have more power (can revoke transactions issued by lower keys).\r\n- Staged partial withdrawals: Make it possible for weakly-secured keys to only withdraw small amounts (eg: 1% per day) while strongly-secured keys can withdraw more money. This is interesting because current custodian solutions need to use their keys every time there is a movement of funds to a hot wallet, therefore putting the whole cold wallet at risk, while with staged withdrawals you could just use the lower-level keys for that and if they get stolen an attacker would only be able to steal part of the funds. This may also be able to remove the need to have hot wallets.\r\n\r\n## Drawbacks\r\nThe main problem I can see with this approach is that the script used for these vaults will need to be revealed to the world, and given that it is a non-standard script, that will leak data on the owner of the coins locked there. Note that this has already happened in the past with non-standard multisig scripts, see the section on `Real life example - Rare multisignature scripts` in [the Privacy page of the bitcoin wiki](https://en.bitcoin.it/wiki/Privacy). I don't really know how  if this is a problem at all for this usecase, but it might be possible to solve it by using P2SH-encumbered transaction trees and ECDSA MPC (Multi Party Computation) schemes.\r\n\r\n## Other blockchains\r\nThe design proposed here can be also easily implemented in any chain that supports smart contracts, such as Ethereum, where smart-contract-based wallets are starting to become the norm and could actually be used to build much more complex mechanisms than the ones described here.\r\n\r\nAs of 21/2/2021, a back-of-the-envelope sum of the market cap of the biggest currencies that could support vaults (btc, eth, bch, bsv, ltc, eos) accounts for 80% of the global cryptocurrency market cap.",
      "createdAt": "2020-02-20T19:18:07Z",
      "updatedAt": "2020-04-14T15:24:02Z",
      "closedAt": null,
      "comments": [
        {
          "author": "kanzure",
          "authorAssociation": "NONE",
          "body": "I would clarify that in the \"expanded vaults\" section, or just before it, that I actually consider the staged partial withdrawals to be required. Otherwise, the scheme breaks down and isn't helpful. The reason why is because the attacker might just wait for the user to broadcast the delay transaction, and then the attacker strikes by stealing 100% of the funds from the hot wallet when the user moves the funds over. The staged withdrawals are, therefore, required to have any security benefit, in a model where attackers can be patient.\r\n\r\nThere are a few implementations and demos floating around now, mine was released yesterday:\r\n\r\n* https://github.com/kanzure/python-vaults\r\n* https://github.com/re-vault/re-vault\r\n\r\ncc @kloaec @shommel @jswambo @mcelrath",
          "createdAt": "2020-04-14T14:39:18Z",
          "updatedAt": "2020-04-14T14:39:18Z"
        },
        {
          "author": "mcelrath",
          "authorAssociation": "NONE",
          "body": "Vaults are an incredible additional complexity.\r\n\r\n![image](https://user-images.githubusercontent.com/1746780/79241487-1e077280-7e41-11ea-9382-3893fae36a1a.png)\r\n\r\nIn addition to Bryan's point about sharding your wallet, there are at least 3 implied wallets, each of which should have multi-sig in principle. Your \"active wallet\" can be divided into a \"sending\" and \"receiving\" wallet, then there's the \"vault\" device(s) which hold pay-to-recovery-wallet transactions/data (in the case of CTV), and the recovery wallet itself. On top of that there is design considerations around the \"watchtower\" which is responsible for noticing a theft and sending to your recovery wallet. This could be automated but there are new privacy and attack vectors there, as well as concerns about how to properly incentivize a watchtower. Then there's questions about secure communication and nonce protocols for the multiple devices involved. \r\n\r\nWhile I generally favor adding these considerations, it's complex.\r\n\r\nI think first anyone interested in this topic should first weigh in on @kanzure's post to the bitcoin-dev mailing list, and his code.\r\n\r\nAnyone interested in reviewing our paper drafts on this topic before publication, please ping me privately. We're looking for someone to look at our \"threat model\" through the lens of a CSO/Risk type person, and give us some feedback. (right now...)",
          "createdAt": "2020-04-14T15:24:02Z",
          "updatedAt": "2020-04-14T15:24:02Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU1NjM3NDk4",
      "title": "fix typos",
      "url": "https://github.com/cgtf/draft-crypto-assets-security-considerations/pull/1",
      "state": "MERGED",
      "author": "shayanb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Folk --> fork",
      "createdAt": "2019-02-23T20:27:09Z",
      "updatedAt": "2019-02-25T07:39:32Z",
      "baseRepository": "cgtf/draft-crypto-assets-security-considerations",
      "baseRefName": "master",
      "baseRefOid": "29fafc1536bce98f6b9c9d0da3a56608c764facc",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "c8d1085072e82d2bad08a9502385161dbf42c1d3",
      "closedAt": "2019-02-25T07:39:32Z",
      "mergedAt": "2019-02-25T07:39:32Z",
      "mergedBy": "nunnun",
      "mergeCommit": {
        "oid": "710bff4372c0ecff09ca95424ac9ec4a4682e24e"
      },
      "comments": [
        {
          "author": "nunnun",
          "authorAssociation": "MEMBER",
          "body": "@shayanb Thanks for your PR.\r\nLGTM",
          "createdAt": "2019-02-25T02:47:32Z",
          "updatedAt": "2019-02-25T02:47:43Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA3MTk3NTIy",
          "commit": {
            "abbreviatedOid": "c8d1085"
          },
          "author": "nunnun",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2019-02-25T02:47:58Z",
          "updatedAt": "2019-02-25T02:47:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 2,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU2MDk1NTA3",
      "title": "Grammar fixes and typos",
      "url": "https://github.com/cgtf/draft-crypto-assets-security-considerations/pull/2",
      "state": "MERGED",
      "author": "shayanb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Manual fixes + Grammarly ",
      "createdAt": "2019-02-26T00:13:24Z",
      "updatedAt": "2019-02-26T16:42:28Z",
      "baseRepository": "cgtf/draft-crypto-assets-security-considerations",
      "baseRefName": "master",
      "baseRefOid": "140475d5423991ab51f6e426809471f01b6b967a",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "1df9a0e1337e5a11e1029f6c493e550b98b6ddda",
      "closedAt": "2019-02-26T07:13:27Z",
      "mergedAt": "2019-02-26T07:13:27Z",
      "mergedBy": "nunnun",
      "mergeCommit": {
        "oid": "6a840f75a9f90aede3d81db11a8e87ffb72c902c"
      },
      "comments": [
        {
          "author": "shayanb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No worries. The document is shaping up well. ",
          "createdAt": "2019-02-26T16:42:28Z",
          "updatedAt": "2019-02-26T16:42:28Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA3Nzc4NzA3",
          "commit": {
            "abbreviatedOid": "1df9a0e"
          },
          "author": "masanork",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "thanks for fixing grammar and typos fix.",
          "createdAt": "2019-02-26T06:25:44Z",
          "updatedAt": "2019-02-26T06:25:44Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA3NzkxMTI5",
          "commit": {
            "abbreviatedOid": "1df9a0e"
          },
          "author": "nunnun",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM.\r\nThank you so much for your contribution.",
          "createdAt": "2019-02-26T07:13:16Z",
          "updatedAt": "2019-02-26T07:13:16Z",
          "comments": []
        }
      ]
    }
  ]
}